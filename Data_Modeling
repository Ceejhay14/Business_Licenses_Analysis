/* Drop unneccessary column and columns with NULL values */
ALTER TABLE business_licenses_fact DROP COLUMN WARD,
    DROP COLUMN PRECINCT,
    DROP COLUMN WARD_PRECINCT,
    DROP COLUMN POLICE_DISTRICT,
    DROP COLUMN business_activity,
    DROP COLUMN business_activity_id,
    DROP COLUMN application_created_date,
    DROP COLUMN ssa,
    DROP COLUMN latitude,
    DROP COLUMN longitude,
    DROP COLUMN loc
    
ALTER TABLE business_licenses_fact DROP LICENSE_STATUS_CHANGE_DATE;


/* Create location dimension to reduce redundant addresses in the fact table */

CREATE TABLE loc_dimension(
    location_id SERIAL PRIMARY KEY, /*Surrogate key */
    address TEXT,
    city TEXT,
    state TEXT,
    zip_code TEXT,
    ward NUMERIC(20),
    precinct NUMERIC(20),
    ward_precinct TEXT,
    police_district NUMERIC(20),
    latitude NUMERIC(20),
    longitude NUMERIC(20),
    loc TEXT
);


/*Populate loc_dimension */

INSERT INTO loc_dimension (address, city, state, zip_code, ward, 
                            precinct, ward_precinct, police_district, latitude, longitude, loc)
SELECT DISTINCT 
    address,
    city, 
    state, 
    zip_code, 
    ward, 
    precinct, 
    ward_precinct, 
    police_district,
    latitude,
    longitude,
    loc::TEXT
FROM business_licenses_fact
WHERE loc IS NOT NULL;

/* Create a column in fact table, set as foreign key and its reference
and populate data that matches surrogate key in dimension table */

drop table loc_dimension;
ALTER TABLE business_licenses_fact
    drop COLUMN location_id;

ALTER TABLE business_licenses_fact
    ADD location_id INT;
ALTER TABLE business_licenses_fact
    ADD FOREIGN KEY (location_id) REFERENCES loc_dimension(location_id);

/* Populate location_id in fact table based on surrogate key*/
UPDATE business_licenses_fact fc
SET location_id = lc.location_id
FROM loc_dimension lc
WHERE fc.address = lc.address AND
    fc.city = lc.city AND
    fc.state = lc.state AND
    fc.zip_code = lc.zip_code AND
    fc.ward = lc.ward AND 
    fc.precinct = lc.precinct AND 
    fc.ward_precinct = lc.ward_precinct AND 
    fc.police_district = lc.police_district AND 
    fc.latitude = lc.latitude AND 
    fc.longitude = lc.longitude AND 
    fc.loc::TEXT = lc.loc
;
/* Drop normalized columns*/
ALTER TABLE business_licenses_fact 
    DROP COLUMN address,
    DROP COLUMN city, 
    DROP COLUMN state, 
    DROP COLUMN zip_code, 
    DROP COLUMN ward, 
    DROP COLUMN precinct, 
    DROP COLUMN ward_precinct, 
    DROP COLUMN police_district,
    DROP COLUMN latitude,
    DROP COLUMN longitude,
    DROP COLUMN loc

/* Create dim for date*/

CREATE TABLE date_dim (
    date_id SERIAL PRIMARY KEY, /*surrogate */
    PAYMENT_DATE DATE,
    LICENSE_TERM_START_DATE DATE,
    LICENSE_TERM_EXPIRATION_DATE DATE,
    LICENSE_APPROVED_FOR_ISSUANCE DATE,
    DATE_ISSUED DATE 
)

/* Populate dim table */
INSERT INTO date_dim (  PAYMENT_DATE,
    LICENSE_TERM_START_DATE,
    LICENSE_TERM_EXPIRATION_DATE,
    LICENSE_APPROVED_FOR_ISSUANCE,
    DATE_ISSUED)
SELECT DISTINCT
    PAYMENT_DATE::DATE,
    LICENSE_TERM_START_DATE::DATE,
    LICENSE_TERM_EXPIRATION_DATE::DATE,
    LICENSE_APPROVED_FOR_ISSUANCE::DATE,
    DATE_ISSUED::DATE 
FROM business_licenses_fact;

ALTER TABLE business_licenses_fact
    ADD COLUMN date_id INT;

 ALTER TABLE business_licenses_fact
    ADD FOREIGN KEY (date_id) REFERENCES date_dim(date_id);

/*Populate fact's date_id based on distinct rows in date_dim */

UPDATE business_licenses_fact fc
SET date_id = di.date_id
FROM date_dim di
WHERE fc.PAYMENT_DATE::DATE = di.PAYMENT_DATE AND
    fc.LICENSE_TERM_START_DATE::DATE = di.LICENSE_TERM_START_DATE AND
    fc.LICENSE_TERM_EXPIRATION_DATE::DATE = di.LICENSE_TERM_EXPIRATION_DATE AND
    fc.LICENSE_APPROVED_FOR_ISSUANCE::DATE = di.LICENSE_APPROVED_FOR_ISSUANCE AND 
    fc.DATE_ISSUED::DATE = di.DATE_ISSUED
;

ALTER TABLE business_licenses_fact 
DROP COLUMN application_created_date,
DROP COLUMN APPLICATION_REQUIREMENTS_COMPLETE,
DROP COLUMN PAYMENT_DATE,
DROP COLUMN LICENSE_TERM_START_DATE,
DROP COLUMN LICENSE_TERM_EXPIRATION_DATE,
DROP COLUMN LICENSE_APPROVED_FOR_ISSUANCE,
DROP LICENSE_STATUS_CHANGE_DATE,
DROP COLUMN DATE_ISSUED

/* SET PRIMARY KEY IN FACT TABLE*/
ALTER TABLE business_licenses_fact
ADD Primary KEY (License_ID);

/* CREATE LICENSE DIMENSION TABLE */
CREATE TABLE license_code_dim AS 
    SELECT 
        DISTINCT license_code, 
        license_description
    FROM 
        business_licenses_fact

select * from license_code_dim;

/*ALTERING TABLE TO ADD PRIMARY AND FOREIGN KEY */

ALTER TABLE license_code_dim
    ADD PRIMARY key (license_code);

ALTER TABLE business_licenses_fact
    ADD FOREIGN KEY (license_code) REFERENCES license_code_dim (license_code);
    
/* DROPPING REDUNDANT COLUMN*/

ALTER TABLE business_licenses_fact DROP license_description;

/* CREATE Business_activity_dim DIMENSION TABLE */
CREATE TABLE Business_activity_dim AS 
    SELECT 
        DISTINCT business_activity_id, 
        business_activity
    FROM 
        business_licenses_fact

/*ALTERING TABLE TO ADD PRIMARY AND FOREIGN KEY */

ALTER TABLE Business_activity_dim
    ADD PRIMARY key (business_activity_id);

ALTER TABLE business_licenses_fact
    ADD FOREIGN KEY (business_activity_id) REFERENCES Business_activity_dim (business_activity_id);

UPDATE business_licenses_fact fc
SET business_activity_id = b.business_activity_id
FROM business_activity_dim b
WHERE fc.business_activity = b.business_activity
;

ALTER TABLE business_licenses_fact DROP business_activity;


/* CREATING MORE DIMENSION TABLE */

CREATE TABLE license_stat_dim (
    stat_id SERIAL PRIMARY KEY, /*surrogate */
    APPLICATION_TYPE TEXT,
    CONDITIONAL_APPROVAL TEXT,
    LICENSE_STATUS TEXT
)

/* Populate dim table */
INSERT INTO license_stat_dim ( APPLICATION_TYPE,
    CONDITIONAL_APPROVAL,
    LICENSE_STATUS)
SELECT DISTINCT
    APPLICATION_TYPE,
    CONDITIONAL_APPROVAL,
    LICENSE_STATUS
FROM business_licenses_fact;

ALTER TABLE business_licenses_fact
    ADD COLUMN stat_id INT;

ALTER TABLE business_licenses_fact
    ADD FOREIGN KEY (stat_id) REFERENCES license_stat_dim(stat_id);

UPDATE business_licenses_fact f
SET stat_id = s.stat_id
FROM license_stat_dim s
WHERE f.application_type = s.application_type AND
    f.conditional_approval = s.conditional_approval AND
    f.license_status = s.license_status
;

ALTER TABLE business_licenses_fact 
DROP COLUMN APPLICATION_TYPE,
DROP COLUMN CONDITIONAL_APPROVAL,
DROP COLUMN LICENSE_STATUS;

SELECT * FROM license_stat_dim;

/* Dropping unwanted column*/

ALTER TABLE business_licenses_fact 
DROP COLUMN ssa;

/* acc number info*/

CREATE TABLE account_info_dim (
    account_id SERIAL PRIMARY KEY, /*surrogate */
    account_number numeric (20),
    legal_name TEXT,
    DOING_BUSINESS_AS_NAME TEXT
)

INSERT INTO account_info_dim (account_number, legal_name
                            ,DOING_BUSINESS_AS_NAME)
SELECT DISTINCT
    account_number,
    legal_name,
    DOING_BUSINESS_AS_NAME
FROM business_licenses_fact;

ALTER TABLE business_licenses_fact
    ADD COLUMN account_id INT;

ALTER TABLE business_licenses_fact
    ADD FOREIGN KEY (account_id) REFERENCES account_info_dim(account_id);

UPDATE business_licenses_fact f
SET account_id = a.account_id
FROM account_info_dim a
WHERE f.account_number = a.account_number AND
    f.legal_name = a.legal_name AND
    f.DOING_BUSINESS_AS_NAME = a.DOING_BUSINESS_AS_NAME
;

ALTER TABLE business_licenses_fact 
DROP COLUMN account_number,
DROP COLUMN legal_name,
DROP COLUMN DOING_BUSINESS_AS_NAME;

-- Create indexes on foreign key columns for better performance
CREATE INDEX idx_license_code ON business_licenses_fact (license_code);
CREATE INDEX idx_license_number ON business_licenses_fact (license_number);
CREATE INDEX idx_location_id ON business_licenses_fact (location_id);
CREATE INDEX idx_date_id ON business_licenses_fact (date_id);
CREATE INDEX idx_business_activity_id ON business_licenses_fact (business_activity_id);
CREATE INDEX idx_stat_id ON business_licenses_fact (stat_id);
CREATE INDEX idx_account_id ON business_licenses_fact (account_id);









    